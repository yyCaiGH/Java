package com.up.infant.model;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.up.common.base.ComParams;
import com.up.common.utils.Sql;
import com.up.common.utils.TextUtils;
import com.up.infant.model.base.BaseComment;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Comment extends BaseComment<Comment> {
	public static final Comment dao = new Comment();

	public static final String table="t_comment t_comment";
	public static final String id="t_comment.id";
	public static final String aId="t_comment.article_id";
	public static final String mId="t_comment.member_id";
	public static final String type="t_comment.type";//0点赞，1评论
	public static final String content="t_comment.content";
	public static final String createTime="t_comment.create_time";
	public static final String status="t_comment.status";//状态（0：正常，1：隐藏）

	public Page<Comment> commentPage(int pageNo,int pageSize,int articleId){
		Map<String,String> map=new HashMap<String, String>();
		map.put(type,"1");
		map.put(status,"0");
		map.put(aId,articleId+"");
		String sql= Sql.from(table)+" LEFT JOIN t_member t_member on t_member.id=t_comment.member_id " +Sql.where(map);
		return paginate(pageNo,pageSize,Sql.select(id,aId,mId,Member.nickname,Member.face),sql);
	}

	public List<Comment> getSimpleComment(int articleId){
		String select=Sql.select(id,aId,mId,Member.nickname,Member.face,content);
		String from=Sql.from(table)+" LEFT JOIN t_member t_member on t_member.id=t_comment.member_id ";
		Map<String,String> map=new HashMap<String, String>();
		map.put(type,"1");
		map.put(status,"0");
		map.put(aId,articleId+"");
		String where=Sql.where(map);
		String sql=select+from+where+Sql.orderBy(createTime,false)+" limit 2";
		return find(sql);
	}
	public List<Comment> getArticleComment(int articleId,int commentType){//type=0,表示点赞，1表示评论
		String select="select t_comment.*,t_member.`heart_img_url`,t_member.`nickname`";
		String from=Sql.from(table)+" LEFT JOIN t_member t_member on t_member.id=t_comment.member_id ";
		Map<String,String> map=new HashMap<String, String>();
		map.put(type,commentType+"");
		map.put(status,"0");
		map.put(aId,articleId+"");
		String where=Sql.where(map);
		String sql=select+from+where+Sql.orderBy(createTime,false) ;
		return find(sql);
	}

	public boolean isLike(int memberId,int articleId){
		Map<String,String> map=new HashMap<String, String>();
		map.put(aId,articleId+"");
		map.put(mId,memberId+"");
		map.put(type,"0");
		map.put(status,"0");
		String sql=Sql.select("count(*) AS count")+Sql.from(table)+Sql.where(map);
		Comment comment=findFirst(sql);
		if (null==comment){
			return false;
		}
		if (comment.getLong("count")<1){
			return false;
		}else {
			return true;
		}
	}

	public Comment hasLike(int memberId,int articleId){
		String sql="SELECT * FROM t_comment WHERE type=0 And t_comment.`member_id`="+memberId+" AND t_comment.`article_id`="+articleId ;
		return findFirst(sql);
	}

//	public void del(int memberId,int articleId){
//		Db.update("delete from t_comment where article_id=? and member_id =? and type =0 and status =0", articleId,memberId);
//		String sql2 = "update t_article set like_count =like_count-1 where id=" + articleId;
//		Db.update(sql2);
//	}

	public Page<Comment> all(ComParams params){
		String select=Sql.select(id,createTime,content,aId,Member.id,Member.nickname);
		String from=Sql.from(table)+" left join "+Member.table+" on "+Member.id+"="+mId;
		Map<String,String> map=new HashMap<String, String>();
		map.put(type,"1");
		String where=Sql.where(map)+Sql.orderBy(createTime,false);
		return paginate(params.getPageNo(),params.getPageSize(),select,from+where);
	}


	public Page<Comment> getList(Comment comment, int pageNo, int pageSize) {
		String select = "SELECT t.*,m.nickname AS nickname";
		String sqlExceptSelect = "from t_comment AS t"+
				" LEFT JOIN t_member AS m ON t.member_id = m.id"+
				" WHERE 1=1";

		if (comment.getStatus()!=null){
			sqlExceptSelect +=" AND t.status="+comment.getStatus();
		}
		if (comment.getType()!=null){
			sqlExceptSelect +=" AND t.type="+comment.getType();
		}
		sqlExceptSelect +=" order by t.id asc";
		return paginate(pageNo, pageSize, select, sqlExceptSelect);
	}
}
