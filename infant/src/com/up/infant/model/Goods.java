package com.up.infant.model;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.up.common.utils.TextUtils;
import com.up.infant.model.base.BaseGoods;
import com.up.infant.model.params.Search;

import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Goods extends BaseGoods<Goods> {
    public static final Goods dao = new Goods();

    public Page<Goods> getList(Goods goods, int pageNo, int pageSize) {
        String sqlExceptSelect = "from t_goods t where 1=1";
        if (goods.getBrandId() != null) {
            sqlExceptSelect += " AND t.brand_id=" + goods.getBrandId();
        }
        if (goods.getOneCatId() != null) {
            sqlExceptSelect += " AND t.one_cat_id=" + goods.getOneCatId();
        }
        if (goods.getTowCatId() != null) {
            sqlExceptSelect += " AND t.tow_cat_id=" + goods.getTowCatId();
        }
        if (!TextUtils.isEmpty(goods.getMainNumber())) {
            sqlExceptSelect += " AND t.main_number like'%" + goods.getMainNumber()+"%'";
        }
        if (!TextUtils.isEmpty(goods.getName())) {
            sqlExceptSelect += " AND t.name like '%" + goods.getName() + "%'";
        }
        if (goods.getPutaway() != null) {
            sqlExceptSelect += " AND t.putaway=" + goods.getPutaway();
        }
        if (goods.getRecommend() != null) {
            sqlExceptSelect += " AND t.recommend=" + goods.getRecommend();
        }
        sqlExceptSelect += " order by id DESC";
        Page<Goods> page =  paginate(pageNo, pageSize, "select *", sqlExceptSelect);
        //获取商品总库存，总销量
        for(int i = 0;i<page.getList().size();i++){
            //获取总库存数
            List<SkuGoods> skuGoodsList = SkuGoods.dao.getListbyGoodsId(page.getList().get(i).getId());
            int total_stock = 0;
            for (int j = 0;j<skuGoodsList.size();j++){
                total_stock +=skuGoodsList.get(j).getRepertory();
            }
            //获取总销售数
            List<OrderGoods> orderGoodsList = OrderGoods.dao.getListByGoodsId(page.getList().get(i).getId());
            int total_sales = 0;
            double total_saleroom = 0.0;
            for (int j = 0;j<orderGoodsList.size();j++){
                total_sales +=orderGoodsList.get(j).getCount();//获取总销售数
                total_saleroom +=orderGoodsList.get(j).getCount()*orderGoodsList.get(j).getDisPrice();//获取总销售额
            }
            page.getList().get(i).put("totalStock",total_stock);
            page.getList().get(i).put("totalSales",total_sales);
            page.getList().get(i).put("totalSaleroom",total_saleroom);
        }
        return page;
    }

    public List<Goods> getAllList(Goods goods) {
        String select = "select *";
        String sqlExceptSelect = " from t_goods t where 1=1";
        if (goods.getBrandId() != null) {
            sqlExceptSelect += " AND t.brand_id=" + goods.getBrandId();
        }
        if (goods.getOneCatId() != null) {
            sqlExceptSelect += " AND t.one_cat_id=" + goods.getOneCatId();
        }
        if (goods.getTowCatId() != null) {
            sqlExceptSelect += " AND t.tow_cat_id=" + goods.getTowCatId();
        }
        if (goods.getPutaway() != null) {
            sqlExceptSelect += " AND t.putaway=" + goods.getPutaway();
        }
        if (goods.getRecommend() != null) {
            sqlExceptSelect += " AND t.recommend=" + goods.getRecommend();
        }
        sqlExceptSelect += " order by id DESC";
        String sql = select+sqlExceptSelect;
        return find(sql);
    }

    public Goods getById(long id) {
        return dao.findById(id);
    }

    public Page<Goods> getGoodsList1(int pageNo, int pageSize, Search search1) {
        String search = search1.getSearch();

        Page<Goods> page;
        String sqlExceptSelect = "from t_goods\n" +
                "where t_goods.putaway=1\n" +
                "and t_goods.name like '%" + search + "%'";
        sqlExceptSelect = sqlOrderBy(sqlExceptSelect, search1);
        page = paginate(pageNo, pageSize, "select *", sqlExceptSelect);
        if (page.getList().isEmpty()) {
            sqlExceptSelect = "from t_goods t_goods\n" +
                    "Left join t_category t_category1 on t_category1.id=t_goods.one_cat_id\n" +
                    "LEFT JOIN t_category t_category2 ON t_category2.id=t_goods.tow_cat_id\n" +
                    "where t_goods.putaway=1\n" +
                    "and (t_category1.cat_name like '%" + search + "%' or t_category2.cat_name LIKE '%" + search + "%')";
            sqlExceptSelect = sqlOrderBy(sqlExceptSelect, search1);
            page = paginate(pageNo, pageSize, "select *", sqlExceptSelect);
            if (page.getList().isEmpty()) {
                sqlExceptSelect = "from t_goods t_goods\n" +
                        "Left join t_brand t_brand on t_brand.id=t_goods.brand_id\n" +
                        "where t_goods.putaway=1\n" +
                        "and (t_brand.name_zh like '%" + search + "%' or t_brand.name_en LIKE '%" + search + "%' )";
                sqlExceptSelect = sqlOrderBy(sqlExceptSelect, search1);
                page = paginate(pageNo, pageSize, "select *", sqlExceptSelect);
            }
        }

        return page;
    }

    public Page<Goods> getGoodsList(int pageNo, int pageSize, Search search) {
        Page<Goods> page;
        String sqlExceptSelect = "from t_goods t_goods";
        sqlExceptSelect += " LEFT JOIN t_goods_points t_goods_points ON t_goods_points.`goods_id`=t_goods.`id` ";

        if (null != search.getColor()) {
            sqlExceptSelect += " LEFT JOIN t_sku_goods t_sku_goods ON t_sku_goods.goods_id=t_goods.id ";
        }
        sqlExceptSelect += " where t_goods.putaway=1";
        if (null != search.getBrandId()) {
            sqlExceptSelect += " and t_goods.brand_id=" + search.getBrandId();
        }
        if (null != search.getSex()) {
            sqlExceptSelect += " and t_goods.apply_sex=" + search.getSex();
        }
        if (null != search.getAge()) {
            sqlExceptSelect += " and t_goods.apply_age like '%" + search.getAge()+"%'";
        }
        if (null != search.getMinPrice()) {
            sqlExceptSelect += " and ( t_goods.market_price>=" + search.getMinPrice() + " OR t_goods.promote_price>= " + search.getMinPrice() + " )";
        }
        if (null != search.getMaxPrice()) {
            sqlExceptSelect += " and ( t_goods.market_price<=" + search.getMaxPrice() + " OR t_goods.promote_price<= " + search.getMaxPrice() + " )";
        }
        if (null != search.getColor()) {
//            sqlExceptSelect += " and ( t_sku_goods.sku1_id1=" + search.getColor() +
//                    " OR t_sku_goods.sku1_id2=" + search.getColor() +
//                    " OR t_sku_goods.sku1_id3=" + search.getColor() +
//                    " OR t_sku_goods.sku1_id4=" + search.getColor() +
//                    " OR t_sku_goods.sku1_id5=" + search.getColor() + ")";

            String colors=search.getColor();
            String[] color=colors.split(",");
            sqlExceptSelect += " and ( ";
            for (int i=0;i<color.length;i++){
                if (i==0){
                    sqlExceptSelect+="( t_sku_goods.sku5_id=" + color[i]+
                            " OR t_sku_goods.sku1_id=" + color[i] +
                            " OR t_sku_goods.sku2_id=" + color[i] +
                            " OR t_sku_goods.sku3_id=" + color[i] +
                            " OR t_sku_goods.sku4_id=" + color[i] + ")";
                }else {
                    sqlExceptSelect+=" OR ( t_sku_goods.sku5_id=" + color[i]+
                            " OR t_sku_goods.sku4_id=" + color[i] +
                            " OR t_sku_goods.sku3_id=" + color[i] +
                            " OR t_sku_goods.sku2_id=" + color[i] +
                            " OR t_sku_goods.sku1_id=" + color[i] + ")";
                }
            }
            sqlExceptSelect += " ) ";

        }
        if (null != search.getSeason()) {
//            sqlExceptSelect += " and t_goods.apply_season=" + search.getSeason();
            sqlExceptSelect += " and ( ";
            String seasons=search.getSeason();
            String[] season=seasons.split(",");
            for (int i=0;i<season.length;i++){
                if (i==0){
                    sqlExceptSelect+=" t_goods.apply_season like '%"+season[i]+"%'";
                }else {
                    sqlExceptSelect+=" OR t_goods.apply_season  like '%"+season[i]+"%'";
                }
            }
            sqlExceptSelect += " ) ";
        }
        if (null != search.getCatId2()) {
            sqlExceptSelect += " and t_goods.tow_cat_id=" + search.getCatId2();
        }
        sqlExceptSelect = sqlOrderBy(sqlExceptSelect, search);
        return paginate(pageNo, pageSize, true, " SELECT t_goods.*,t_goods_points.`sell_point`", sqlExceptSelect);

    }

    private String sqlOrderBy(String sql, Search search) {

        if (search.getRankType() == 0) {
            sql += " ORDER BY t_goods.total_sales DESC";
        } else if (search.getRankType() == 1) {
            sql += " ORDER BY t_goods.create_time DESC,t_goods.putaway DESC";
        } else if (search.getRankType() == 2) {
            sql += " ORDER BY (t_goods.promote_price/t_goods.market_price) ASC";
        } else if (search.getRankType() == 3){
            sql += " ORDER BY t_goods.promote_price ASC";
        }else {
            sql += " order by t_goods.`recommend` desc";
        }
        return sql;
    }

    public Goods getInfo(Integer goodsId, Integer memberId) {
        String sql;
        if (null != memberId) {
            sql = "SELECT t_goods.*,t_collect.id AS collect \n" +
                    " FROM  t_goods t_goods\n" +
                    " LEFT JOIN t_collect t_collect ON t_collect.goods_id=t_goods.id AND t_collect.member_id=" + memberId +
                    " WHERE t_goods.id=  " + goodsId;
        } else {
            sql = "SELECT t_goods.*" +
                    " FROM  t_goods t_goods\n" +
                    " WHERE t_goods.id=  " + goodsId;
        }
        return findFirst(sql);
    }

    public List<Goods> getRecommendGoods() {
        String sql = "SELECT * FROM t_goods WHERE putaway=1 AND recommend=1 ORDER BY RAND() LIMIT 4";
        return find(sql);
    }

    public List<Goods> getBrandGoods(int brandId, Integer goodsSize) {
        int size = 8;
        if (null != goodsSize) {
            size = goodsSize;
        }
//        String sql = "SELECT t_goods.id,t_goods.name,t_goods.img1_url,t_goods.promote_price,t_goods.market_price FROM t_goods WHERE putaway=1 AND recommend=1 AND brand_id="+brandId+" ORDER BY RAND() LIMIT " + size;
        String sql = "SELECT t_goods.id,t_goods.name,t_goods.img1_url,t_goods.promote_price,t_goods.market_price FROM t_goods WHERE putaway=1  AND brand_id="+brandId+" ORDER BY RAND() LIMIT " + size;
        return find(sql);
    }

    public void updateBatch(List<Goods> goodsList) {
        Db.batchUpdate(goodsList,goodsList.size());
    }

    /**
     * 计算有使用这个tag的商品个数
     * @param id
     */
    public Long getTagCount(Integer id) {
        String sql = "SELECT COUNT(*) AS num FROM t_goods WHERE tag_id="+id;
        Goods goods = findFirst(sql);
        return goods.get("num");
    }

    /**
     *  更新商品的sku总库存和对应品牌的总库存
     * @param isAdd true ，增加库存，false，减少库存
     * @param goodsId
     * @param count
     */
    public void updateSkuRepertory(boolean isAdd,Integer goodsId,int count) {
        Goods goods = Goods.dao.findById(goodsId);
        if (isAdd){
            goods.setSkuRepertory(goods.getSkuRepertory()+count);
        }
        else{
            goods.setSkuRepertory(goods.getSkuRepertory()-count);
        }
        goods.update();

        Brand.dao.updateSkuRepertory(isAdd,goods.getBrandId(),count);
    }
}
