package com.up.infant.model;

import com.jfinal.plugin.activerecord.Page;
import com.sun.org.apache.regexp.internal.RE;
import com.up.common.utils.Sql;
import com.up.infant.model.base.BaseBrand;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Brand extends BaseBrand<Brand> {
    public static final Brand dao = new Brand();

    public Page<Brand> getList(int pageNo, int pageSize, boolean isSale) {
        String status;
        if (isSale) {
            status = "1";
        } else {
            status = "2";
        }
        Page<Brand> page = paginate(pageNo, pageSize, "select *", "from t_brand where status = " + status + " order by id asc ");
        for(int i = 0;i<page.getList().size();i++){
            //总上架数和总下架数
            String sql = "SELECT COUNT(CASE WHEN putaway=1 THEN 1 END) AS sj_num,COUNT(CASE WHEN putaway=2 THEN 1 END) AS xj_num FROM t_goods WHERE brand_id="+page.getList().get(i).getId();
            Goods goods = Goods.dao.findFirst(sql);
            long sjNum = goods.get("sj_num");
            long xjNum = goods.get("xj_num");
            //获取总库存数
            List<SkuGoods> skuGoodsList = SkuGoods.dao.getListbyBrandId(page.getList().get(i).getId());
            int total_stock = 0;

            for (int j = 0;j<skuGoodsList.size();j++){
                total_stock +=skuGoodsList.get(j).getRepertory();
            }
            //获取总销售数
            List<OrderGoods> orderGoodsList = OrderGoods.dao.getListByBrandId(page.getList().get(i).getId());
            int total_sales = 0;
            double total_saleroom = 0.0;
            for (int j = 0;j<orderGoodsList.size();j++){
                total_sales +=orderGoodsList.get(j).getCount();//获取总销售数
                total_saleroom +=orderGoodsList.get(j).getCount()*orderGoodsList.get(j).getDisPrice();//获取总销售额
            }
            page.getList().get(i).put("totalStock",total_stock);
            page.getList().get(i).put("totalSales",total_sales);
            page.getList().get(i).put("totalSaleroom",total_saleroom);
            page.getList().get(i).put("sjNum",sjNum);
            page.getList().get(i).put("xjNum",xjNum);
        }

        return page;
    }

    /*public Page<Brand> getList(int pageNo, int pageSize, boolean isSale) {
        *//*SELECT t.*,SUM(g.`sku_repertory`) AS total_repertory
        FROM t_brand t
        LEFT JOIN t_goods g ON g.`brand_id` = t.`id`
        GROUP BY t.`id`*//*
        String select = "SELECT t.*,SUM(g.sku_repertory) AS total_repertory";
        String sqlExceptSelect = "from t_brand AS t"+
                " LEFT JOIN t_goods AS g ON g.brand_id = t.id"+
                " WHERE 1=1";
        if (isSale) {
            sqlExceptSelect +=" AND t.status=1";
        } else {
            sqlExceptSelect +=" AND t.status=2";
        }
        sqlExceptSelect +=" GROUP BY t.id";
        sqlExceptSelect +=" order by t.id ASC";
        return paginate(pageNo, pageSize,true, select, sqlExceptSelect);
    }*/

    /**
     * 获取已上架的全部品牌
     *
     * @return
     */
    public List<Brand> getPutawayBrands() {
        String sql = Sql.select("*") + Sql.from("t_brand");
        Map<String, String> map = new HashMap<String, String>();
        map.put("status","1");
        sql = sql + Sql.where(map);
        return find(sql);
    }

    public List<Brand> getBrands(){
        String sql="SELECT t_brand.* ,t_country.name AS country_name ,t_country.img_url AS country_img\n" +
                "FROM t_brand t_brand\n" +
                "LEFT JOIN t_country t_country ON t_country.id=t_brand.country_id\n" +
                "WHERE t_brand.status=1\n";
        return find(sql);
    }

    public List<Brand> getRecommendGoods(){
        String sql="SELECT * FROM t_brand WHERE STATUS=1 AND recommend=1 ORDER BY RAND() LIMIT 3";

        return find(sql);
    }

    public Page<Brand> getList(int pageNo, int pageSize) {
        return paginate(pageNo,pageSize,true,"select t_brand.*" ,"FROM t_brand WHERE STATUS=1 AND recommend=1 ORDER BY create_time");

    }

    public Brand getById(long l) {
        return findById(l);
    }

    public List<Brand> brandList(String search){
        String sql="SELECT * FROM t_brand WHERE (t_brand.`name_en` LIKE '%"+search+"%' OR t_brand.`name_zh` LIKE '%"+search+"%') AND t_brand.`status`=1";
        return find(sql);
    }

    /**
     * 上架，上架加一，下架减一，下架反之
     * @param brandId
     * @param putaway
     */
    public void updateBrandPutawayCount(Integer brandId, Integer putaway) {
       Brand brand =  findById(brandId);
       if (putaway==1){
           brand.setGoodsSjCount(brand.getGoodsSjCount()+1);
           brand.setGoodsXjCount(brand.getGoodsXjCount()-1);
       }
       else{
           brand.setGoodsSjCount(brand.getGoodsSjCount()-1);
           brand.setGoodsXjCount(brand.getGoodsXjCount()+1);
       }
        brand.update();
    }

    /**
     * 更新品牌总库存
     * @param isAdd true ，增加库存，false，减少库存
     * @param brandId
     * @param repertory
     */
    public void updateSkuRepertory(boolean isAdd,Integer brandId, int repertory) {
        Brand brand = findById(brandId);
        if (isAdd) {
            brand.setTotalStock(brand.getTotalStock() + repertory);
        }
        else{
            brand.setTotalStock(brand.getTotalStock() - repertory);
        }
        brand.update();
    }

    public List<Brand> getOrderBrand(int orderId){
        String sql="SELECT\tt_order_goods.`count`,t_brand.*\n" +
                "FROM t_order_goods\n" +
                "LEFT JOIN  t_sku_goods ON t_sku_goods.`id`=t_order_goods.`sku_goods_id`\n" +
                "LEFT JOIN  t_goods ON t_goods.`id`=t_sku_goods.`goods_id`\n" +
                "LEFT JOIN  t_brand ON t_brand.`id`=t_goods.`brand_id`\n" +
                "\n" +
                "WHERE t_order_goods.`order_id`="+orderId;

        return find(sql);
    }
}
